{"version":3,"sources":["components/NavBar.js","components/TextForm.js","components/alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","mode","style","backgroundColor","href","title","type","id","onClick","ChangeColor","padding","borderRadius","class","toggleMode","htmlFor","TextForm","useState","value","setvalue","darkmode","darkfont","height","background","color","rows","onChange","event","target","UpperCase","toUpperCase","AlertFunction","LowerCase","toLowerCase","replaceAll","flip","i","length","Math","random","charAt","split","Alert","Alertme","role","status","message","App","setmode","setAlert","showAlert","msg","setTimeout","white","setwhite","colorName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4057276.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from 'react-router-dom'\r\n  \r\nconst NavBar=(props)=>\r\n{\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode}`} style={{backgroundColor: `${props.mode===\"light\"?\"#e3f2fd\":\"black\"}`}}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href = \"#\" > {props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"/>\r\n       \r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                <a href =\"#\" className=\"nav-link active\"  >Home</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                <a href =\"#\" className=\"nav-link\">About</a>\r\n                </li>\r\n            </ul>\r\n            \r\n            <div className=\"mx-1\" onClick={()=> props.ChangeColor(\"green\")} style={{backgroundColor: \"green\", padding:\"10px\", borderRadius: \"3px\"}}></div>\r\n            <div className=\"mx-1\" onClick={()=> props.ChangeColor(\"blue\")} style={{backgroundColor: \"blue\", padding:\"10px\", borderRadius: \"3px\"}}></div>\r\n            <div className=\"mx-1\" onClick={()=> props.ChangeColor(\"white\")} style={{backgroundColor: \"white\", padding:\"10px\", borderRadius: \"3px\"}}></div>\r\n            \r\n            \r\n            <div class={`form-check form-switch mx-4 text-${props.mode===\"dark\"?\"light\":\"dark\"}`}>\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n            <label class=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable Dark Mode</label>\r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n   \r\n\r\n    \r\n   </nav>\r\n  )\r\n}\r\n  \r\nexport default NavBar;","import React,{useState} from \"react\";\r\n\r\n\r\nconst TextForm = (props) => {\r\n    const [value, setvalue] = useState(\"Enter Text\")\r\n  \r\n\r\n    \r\n\r\n    const TextOnChange = (event)=> {\r\n        setvalue(event.target.value)\r\n       \r\n    }\r\n\r\n    const ToUpperCase  = ()=> {\r\n        var UpperCase = value.toUpperCase();\r\n        setvalue(UpperCase)\r\n        props.AlertFunction(\"Text has been changed to upper case\", \"Success\")\r\n    }\r\n\r\n    const ToLowerCase  = ()=> {\r\n        var LowerCase = value.toLowerCase();\r\n        setvalue(LowerCase)\r\n        props.AlertFunction(\"Text has been changed to Lower case\", \"Success\")\r\n    }\r\n\r\n    const CLearText  = ()=> {\r\n\r\n        setvalue(\"\")\r\n        props.AlertFunction(\"Text has been cleared\", \"Success\")\r\n    }\r\n\r\n    const RemoveSpace  = ()=> {\r\n        var UpperCase = value.replaceAll(\" \", \"\");\r\n        setvalue(UpperCase)\r\n        props.AlertFunction(\"Spaces have veeb\", \"Success\")\r\n    }\r\n\r\n\r\n    const Jumbo = ()=> {\r\n        var flip = '';\r\n        for (var i = 0; i < value.length; i++) {\r\n          if(Math.random() > .5){\r\n            flip = flip + value.charAt(i).toUpperCase();\r\n          } else {\r\n            flip = flip + value.charAt(i).toLowerCase();\r\n          }\r\n        }\r\n\r\n        setvalue(flip)\r\n    }\r\n\r\n    const [mode, darkmode] = useState(\"light\")\r\n    const [fontmode, darkfont] = useState(\"black\")\r\n\r\n    const DarkModel = ()=> {\r\n        if (mode === \"light\") {\r\n            darkmode(\"dark\")\r\n            darkfont(\"white\")\r\n        } else {\r\n            darkmode(\"light\")\r\n            darkfont(\"black\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        \r\n         <div className = {`\"mb-0 `} style={{height: \"100vh\", background: props.mode===\"dark\"?\"#272e45\":`${props.color}` }}>\r\n             <div className=\"container\">\r\n                <div className={`\"container text-${props.mode===\"dark\"?\"light\":`${props.color===\"white\"?\"black\":\"white\"}`} \"`}>\r\n\r\n                <h2 className=\"py-4\">Enter Text: </h2>\r\n                <textarea className=\"form-control my-3 \" style={{background: props.mode===\"dark\"?\"grey\":\"white\", color: props.mode===\"dark\"?\"white\":`${props.color===\"white\"?\"black\":\"white\"}` }}  rows=\"8\" value= {value} onChange={TextOnChange}></textarea>\r\n                <button type=\"button\"  className=\"btn btn-primary my-3 mx-2\" onClick= {ToUpperCase}>Upper Case</button>\r\n                <button type=\"button\" className=\"btn btn-primary my-3 mx-2\" onClick= {ToLowerCase}>Lower Case</button>\r\n                <button type=\"button\" className=\"btn btn-primary my-3 mx-2\" onClick= {CLearText}>Clear Text</button>\r\n                <button type=\"button\" className=\"btn btn-primary my-3 mx-2\" onClick= {RemoveSpace}>Remove Spaces</button>\r\n                <button type=\"button\" className=\"btn btn-primary my-3 mx-2\" onClick= {Jumbo}>MaKe It LiKe ThIs</button>\r\n             </div>\r\n\r\n            <div className={`container text-${props.mode===\"dark\"?\"light\":`${props.color===\"white\"?\"black\":\"white\"}`} \"} `}>\r\n                <h3>Preview Text:</h3>\r\n                <p>{value}</p>\r\n                <p><strong> {0.008 * value.split(\" \").length} Minutes to read</strong> </p>\r\n                <p>{value.split(\" \").length-1} words and {value.length} characters</p>\r\n            </div>\r\n            <div className={`container text-${props.mode===\"dark\"?\"light\":\"dark\"}`}>\r\n            <button type=\"button\" className=\"btn btn-primary my-3 mx-2\" onClick = {DarkModel}>Dark Mode</button>\r\n            </div>\r\n         </div>\r\n             </div>\r\n             \r\n\r\n         </>\r\n    )\r\n}\r\n\r\nexport default TextForm;","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    return (\r\n        <>\r\n        { props.Alertme &&  \r\n        <div class=\"alert alert-success mb-0\"  role=\"alert\">\r\n         <p> {props.Alertme.status} : {props.Alertme.message} </p> \r\n        </div>\r\n        }\r\n       \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport './components/NavBar'\nimport NavBar from './components/NavBar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alerts from './components/alert';\n\n\n\n\nfunction App() {\n\n  const [mode, setmode] = useState(\"light\");\n\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      showAlert(\"Dark Mode has been enabled!\", \"Success\")\n    } else {\n      setmode(\"light\");\n      showAlert(\"Light Mode has been enabled!\", \"Success\")\n    }\n  }\n\n  const [Alert, setAlert] = useState(null)\n\n  const showAlert = (msg, status) => {\n    setAlert({\n      message : msg,\n      status: status\n    })\n\n\n  }\n\n  setTimeout(() => {\n    setAlert(null)\n  }, 5000);\n\n  const [white, setwhite] = useState(\"white\")\n\n  const ChangeColor = (colorName) => {\n    setwhite(colorName);\n  }\n\n  return (\n    <>\n     < NavBar title = \"My react App!\" mode = {mode} color = {white} ChangeColor = {ChangeColor} toggleMode ={toggleMode} />\n     <Alerts Alertme = {Alert} />\n    < TextForm mode = {mode} color = {white} Alertme = {Alert} AlertFunction = {showAlert} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}